import 'package:flutter/material.dart';
import 'package:get/get_navigation/src/extension_navigation.dart';
import 'package:get/get_state_manager/src/rx_flutter/rx_obx_widget.dart';
import 'package:get/instance_manager.dart';
import 'package:get/get_state_manager/src/simple/get_view.dart';
import 'package:get/get_utils/src/extensions/internacionalization.dart';
import 'package:helper_hub/helper_hub.dart';
import 'package:player_hub/app/core/types/app_functions.dart';
import 'package:player_hub/app/core/static/app_colors.dart';
import 'package:player_hub/app/pages/equalizer/equalize_controller.dart.txt';

class EqualizerPage extends GetView<EqualizerController> with AppFunctions {
  const EqualizerPage({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: AppColors.current().background,
      appBar: AppBar(
        automaticallyImplyLeading: false,
        backgroundColor: AppColors.current().background,
        leading: GestureDetector(
          onTap: () {
            Get.back();
          },
          child: Icon(
            Icons.arrow_back_ios,
            color: AppColors.current().text,
            size: 32,
          ),
        ),
        title: Text(
          'setting_equalizer'.tr,
          style: Theme.of(context).textTheme.headlineMedium,
        ),
        actions: [
          Obx(() {
            return Switch(
              value: controller.equalizerEnabled.value,
              onChanged: (bool value) async {
                await controller.toggleEqualizer(value);
              },
            );
          }),
        ],
      ),
      body: Obx(() {
        if (controller.centerFrequencies.isEmpty) {
          return const Center(child: CircularProgressIndicator());
        }

        return Column(
          children: [
            ListTile(
              title: Text(
                'setting_reset'.tr,
                style: Theme.of(context).textTheme.bodyLarge,
              ),
              trailing: Icon(
                Icons.refresh,
                size: 32,
                color: AppColors.current().text,
              ),
              onTap: () async {
                await controller.resetEqualizer();
              },
            ),
            Padding(
              padding: const EdgeInsets.symmetric(horizontal: 16.0),
              child: Row(
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                children: <Widget>[
                  Text(
                    'equalizer_frequency1'.tr,
                    style: Theme.of(context).textTheme.labelMedium,
                  ),
                  Text(
                    'equalizer_frequency2'.tr,
                    style: Theme.of(context).textTheme.labelMedium,
                  ),
                ],
              ),
            ),
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceEvenly,
              mainAxisSize: MainAxisSize.max,
              children: [
                _buildSliderBand(context, 0),
                _buildSliderBand(context, 1),
                _buildSliderBand(context, 2),
                _buildSliderBand(context, 3),
                _buildSliderBand(context, 4),
              ],
            ),
          ],
        );
      }),
    );
  }

  Widget _buildSliderBand(BuildContext context, int index) {
    return Obx(() {
      return Column(
        mainAxisAlignment: MainAxisAlignment.start,
        mainAxisSize: MainAxisSize.min,
        crossAxisAlignment: CrossAxisAlignment.center,
        children: <Widget>[
          const Space(
            size: 12,
            orientation: Axis.vertical,
          ),
          SizedBox(
            height: 250,
            child: RotatedBox(
              quarterTurns: -1,
              child: Obx(() {
                return Slider(
                  thumbColor: AppColors.current().primary,
                  activeColor: AppColors.current().primary,
                  min: controller.bandLevelMin.toDouble(),
                  max: controller.bandLevelMax.toDouble(),
                  value: controller.frequencies[index],
                  onChanged: controller.equalizerEnabled.value
                      ? (value) async {
                          await controller.updateBandLevel(
                            index,
                            controller.centerFrequencies[index],
                            value,
                          );
                        }
                      : null,
                );
              }),
            ),
          ),
          const Space(
            size: 12,
            orientation: Axis.vertical,
          ),
          Text(
            '${controller.centerFrequencies[index] ~/ 1000} Hz',
            style: Theme.of(context).textTheme.labelMedium,
            maxLines: 1,
            overflow: TextOverflow.ellipsis,
          ),
        ],
      );
    });
  }
}
