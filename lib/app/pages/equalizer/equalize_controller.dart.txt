import 'package:equalizer_flutter/equalizer_flutter.dart';
import 'package:get/get_state_manager/src/simple/get_controllers.dart';
import 'package:get/get_rx/get_rx.dart';
import 'package:get/instance_manager.dart';
import 'package:player_hub/app/core/controllers/player.dart';
import 'package:player_hub/app/core/enums/shared_attibutes.dart';
import 'package:get/get_utils/src/extensions/internacionalization.dart';
import 'package:player_hub/app/core/static/app_shared.dart';
import 'package:player_hub/app/core/types/app_functions.dart';

class EqualizerController extends GetxController with AppFunctions {
  late int bandLevelMin;
  late int bandLevelMax;

  final Rx<int?> sessionId = Rx<int?>(null);
  final RxBool equalizerEnabled =
      (AppShared.getShared(SharedAttributes.equalizeMode) as bool).obs;
  final RxList<double> frequencies =
      (AppShared.getShared(SharedAttributes.frequency) as List<double>).obs;
  final RxList<int> centerFrequencies = RxList<int>();

  EqualizerController() {
    Get.find<PlayerController>()
        .audioPlayer
        .androidAudioSessionIdStream
        .listen((int? id) async {
      if (sessionId.value != null && sessionId.value != id) {
        sessionId.value = id;
        await initializeEqualizer();
        await getEqualizer();
      }
    });
    ever<bool>(
      equalizerEnabled,
      (_) async {
        await EqualizerFlutter.setEnabled(equalizerEnabled.value);
        if (sessionId.value != null) {
          await initializeEqualizer();
          await getEqualizer();
        }
      },
    );
  }

  Future<void> initializeEqualizer() async {
    await EqualizerFlutter.init(sessionId.value ?? 0);
    await EqualizerFlutter.open(sessionId.value ?? 0);
    await EqualizerFlutter.setAudioSessionId(sessionId.value ?? 0);
    for (int i = 0; i < frequencies.length; i++) {
      await EqualizerFlutter.setBandLevel(i, frequencies[i].toInt());
    }
    for (int i = 0; i < frequencies.length; i++) {
      int bandLevel = frequencies[i].toInt();

      if (bandLevel < bandLevelMin) bandLevel = bandLevelMin;
      if (bandLevel > bandLevelMax) bandLevel = bandLevelMax;

      await EqualizerFlutter.setBandLevel(i, bandLevel);
    }
  }

  Future<void> getEqualizer() async {
    final List<int> range = await EqualizerFlutter.getBandLevelRange();
    bandLevelMin = range[0];
    bandLevelMax = range[1];

    centerFrequencies.value = await EqualizerFlutter.getCenterBandFreqs();
  }

  Future<void> resetEqualizer() async {
    frequencies.value =
        (AppShared.getShared(SharedAttributes.frequency) as List<double>);
    await AppShared.setShared(SharedAttributes.frequency, frequencies);
    for (int i = 0; i < frequencies.length; i++) {
      await EqualizerFlutter.setBandLevel(i, frequencies[i].toInt());
    }
  }

  Future<void> updateBandLevel(
    int index,
    int bandId,
    double value,
  ) async {
    int bandLevel = value.toInt();

    if (bandLevel < bandLevelMin) bandLevel = bandLevelMin;
    if (bandLevel > bandLevelMax) bandLevel = bandLevelMax;

    frequencies[index] = bandLevel.toDouble();
    await AppShared.setShared(SharedAttributes.frequency, frequencies);

    await EqualizerFlutter.setBandLevel(bandId, frequencies[index].toInt());
  }

  Future<void> toggleEqualizer(bool isEnabled) async {
    equalizerEnabled.value = isEnabled;
    await AppShared.setShared(
      SharedAttributes.equalizeMode,
      isEnabled,
    );

    for (int i = 0; i < frequencies.length; i++) {
      int bandLevel = frequencies[i].toInt();

      if (bandLevel < bandLevelMin) bandLevel = bandLevelMin;
      if (bandLevel > bandLevelMax) bandLevel = bandLevelMax;

      await EqualizerFlutter.setBandLevel(i, bandLevel.toInt());
    }
    await showToast(isEnabled
        ? "${'setting_equalizer'.tr} ${'app_enable'.tr}"
        : "${'setting_equalizer'.tr} ${'app_disable'.tr}");
  }
}
